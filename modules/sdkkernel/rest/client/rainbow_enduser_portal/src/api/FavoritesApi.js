/**
 * Rainbow Enduser portal
 * # Rainbow end user portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow End user portal. This portal is dedicated to end user features.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * OpenAPI spec version: 1.84.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateFavorite', 'model/CreateFavoriteSuccess', 'model/EnduserUsersGetFavoritesSuccess', 'model/GetUserFavoritesByIdSuccess', 'model/RemoveFavoritesSuccess', 'model/UpdateFavoriteSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateFavorite'), require('../model/CreateFavoriteSuccess'), require('../model/EnduserUsersGetFavoritesSuccess'), require('../model/GetUserFavoritesByIdSuccess'), require('../model/RemoveFavoritesSuccess'), require('../model/UpdateFavoriteSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowEnduserPortal) {
      root.RainbowEnduserPortal = {};
    }
    root.RainbowEnduserPortal.FavoritesApi = factory(root.RainbowEnduserPortal.ApiClient, root.RainbowEnduserPortal.CreateFavorite, root.RainbowEnduserPortal.CreateFavoriteSuccess, root.RainbowEnduserPortal.EnduserUsersGetFavoritesSuccess, root.RainbowEnduserPortal.GetUserFavoritesByIdSuccess, root.RainbowEnduserPortal.RemoveFavoritesSuccess, root.RainbowEnduserPortal.UpdateFavoriteSuccess);
  }
}(this, function(ApiClient, CreateFavorite, CreateFavoriteSuccess, EnduserUsersGetFavoritesSuccess, GetUserFavoritesByIdSuccess, RemoveFavoritesSuccess, UpdateFavoriteSuccess) {
  'use strict';

  /**
   * Favorites service.
   * @module api/FavoritesApi
   * @version 1.84.0
   */

  /**
   * Constructs a new FavoritesApi. 
   * @alias module:api/FavoritesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add a favorite to user&#39;s favorite list
     * This API can be used to add a favorite in user&#39;s favorites list.    This API can only be used by user himself (i.e. userId of logged in user &#x3D; value of userId parameter in URL)       Tree kinds of favorites are managed: user to user, user to room and user to bot. Favorite field type indicates for each favorite if it is related to a user, a room or to a bot.       When a favorite is added in users&#39;s favorite using this API, all user&#39;s XMPP resources will receive the following message indicating that a new favorite has been created:        &#x60;&#x60;&#x60;html &lt;message type&#x3D;\&quot;management\&quot; id&#x3D;\&quot;8413b42e-563c-4437-9a53-06f638b5ab69_0\&quot;            from&#x3D;\&quot;pcloud@openrainbow.com/172440802160413612281463752830017532\&quot;            to&#x3D;\&quot;85a456023ad249bea7a0cb1d5b4fb34a@openrainbow.com\&quot; xmlns&#x3D;\&quot;jabber:client\&quot;&gt;        &lt;favorite id&#x3D;\&quot;57b44e9c0c32e0b425252f9e\&quot; action&#x3D;\&quot;create\&quot; type &#x3D; \&quot;user\&quot; position &#x3D; 4, peer_id &#x3D;\&quot;574ff5153448af6c2940f908\&quot; xmlns&#x3D;\&quot;jabber:iq:configuration\&quot;/&gt;     &lt;/message&gt; &#x60;&#x60;&#x60;    Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/favorites?position&#x3D;1
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5).
     * @param {module:model/CreateFavorite} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateFavoriteSuccess} and HTTP response
     */
    this.createFavoriteWithHttpInfo = function(userId, body) {
      var postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createFavorite");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createFavorite");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateFavoriteSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/favorites', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add a favorite to user&#39;s favorite list
     * This API can be used to add a favorite in user&#39;s favorites list.    This API can only be used by user himself (i.e. userId of logged in user &#x3D; value of userId parameter in URL)       Tree kinds of favorites are managed: user to user, user to room and user to bot. Favorite field type indicates for each favorite if it is related to a user, a room or to a bot.       When a favorite is added in users&#39;s favorite using this API, all user&#39;s XMPP resources will receive the following message indicating that a new favorite has been created:        &#x60;&#x60;&#x60;html &lt;message type&#x3D;\&quot;management\&quot; id&#x3D;\&quot;8413b42e-563c-4437-9a53-06f638b5ab69_0\&quot;            from&#x3D;\&quot;pcloud@openrainbow.com/172440802160413612281463752830017532\&quot;            to&#x3D;\&quot;85a456023ad249bea7a0cb1d5b4fb34a@openrainbow.com\&quot; xmlns&#x3D;\&quot;jabber:client\&quot;&gt;        &lt;favorite id&#x3D;\&quot;57b44e9c0c32e0b425252f9e\&quot; action&#x3D;\&quot;create\&quot; type &#x3D; \&quot;user\&quot; position &#x3D; 4, peer_id &#x3D;\&quot;574ff5153448af6c2940f908\&quot; xmlns&#x3D;\&quot;jabber:iq:configuration\&quot;/&gt;     &lt;/message&gt; &#x60;&#x60;&#x60;    Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/favorites?position&#x3D;1
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5).
     * @param {module:model/CreateFavorite} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateFavoriteSuccess}
     */
    this.createFavorite = function(userId, body) {
      return this.createFavoriteWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all users&#39;s favorite
     * This API can be used to retrieve the list of user&#39;s favorites. This API can only be used by user himself (i.e. userId of logged in user &#x3D; value of userId parameter in URL)       Example: GET http://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/favorites
     * @param {String} userId User unique identifier (like 56c5c19f94141765119f896c)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EnduserUsersGetFavoritesSuccess} and HTTP response
     */
    this.enduserUsersGetFavoritesWithHttpInfo = function(userId, accept) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling enduserUsersGetFavorites");
      }

      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling enduserUsersGetFavorites");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = EnduserUsersGetFavoritesSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/favorites', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all users&#39;s favorite
     * This API can be used to retrieve the list of user&#39;s favorites. This API can only be used by user himself (i.e. userId of logged in user &#x3D; value of userId parameter in URL)       Example: GET http://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/favorites
     * @param {String} userId User unique identifier (like 56c5c19f94141765119f896c)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EnduserUsersGetFavoritesSuccess}
     */
    this.enduserUsersGetFavorites = function(userId, accept) {
      return this.enduserUsersGetFavoritesWithHttpInfo(userId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a favorite by Id
     * This API can be used to retrieve a specific user&#39;s favorite by Id.    This API can only be used by user himself (i.e. userId of logged in user &#x3D; value of userId parameter in URL)       Example: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/favorites/57b44e9c0c32e0b425252f9e/89b44e9c0c32e0b425252fbc
     * @param {String} userId User unique identifier (like 56c5c19f94141765119f896c)
     * @param {String} favoriteId Favorite unique identifier (like 5c2e275ad7ad4634939a7264)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetUserFavoritesByIdSuccess} and HTTP response
     */
    this.getUserFavoritesByIdWithHttpInfo = function(userId, favoriteId, accept) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserFavoritesById");
      }

      // verify the required parameter 'favoriteId' is set
      if (favoriteId === undefined || favoriteId === null) {
        throw new Error("Missing the required parameter 'favoriteId' when calling getUserFavoritesById");
      }

      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getUserFavoritesById");
      }


      var pathParams = {
        'userId': userId,
        'favoriteId': favoriteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetUserFavoritesByIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/favorites/{favoriteId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a favorite by Id
     * This API can be used to retrieve a specific user&#39;s favorite by Id.    This API can only be used by user himself (i.e. userId of logged in user &#x3D; value of userId parameter in URL)       Example: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/favorites/57b44e9c0c32e0b425252f9e/89b44e9c0c32e0b425252fbc
     * @param {String} userId User unique identifier (like 56c5c19f94141765119f896c)
     * @param {String} favoriteId Favorite unique identifier (like 5c2e275ad7ad4634939a7264)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetUserFavoritesByIdSuccess}
     */
    this.getUserFavoritesById = function(userId, favoriteId, accept) {
      return this.getUserFavoritesByIdWithHttpInfo(userId, favoriteId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a favorite from a user&#39;s favorites list
     * This API can be used to remove a favorite from a user&#39;s favorites list.    This API can only be used by user himself (i.e. userId of logged in user &#x3D; value of userId parameter in URL)       When a favorite is removed from users&#39;s favorites using this API, all user&#39;s XMPP resources will receive the following message indicating that a favorite has been deleted:        &#x60;&#x60;&#x60;html &lt;message type&#x3D;\&quot;management\&quot; id&#x3D;\&quot;8413b42e-563c-4437-9a53-06f638b5ab69_0\&quot;            from&#x3D;\&quot;pcloud@openrainbow.com/172440802160413612281463752830017532\&quot;            to&#x3D;\&quot;85a456023ad249bea7a0cb1d5b4fb34a@openrainbow.com\&quot; xmlns&#x3D;\&quot;jabber:client\&quot;&gt;        &lt;favorite id&#x3D;\&quot;57b44e9c0c32e0b425252f9e\&quot; action&#x3D;\&quot;delete\&quot; type &#x3D; \&quot;user\&quot; peer_id &#x3D;\&quot;574ff5153448af6c2940f908\&quot; xmlns&#x3D;\&quot;jabber:iq:configuration\&quot;/&gt;     &lt;/message&gt; &#x60;&#x60;&#x60;    Example: DELETE https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/favorites/574ff5153448af6c2940f908
     * @param {String} userId User unique identifier (like 56c5c19f94141765119f896c)
     * @param {String} favoriteId Favorite unique identifier (like 5c2e275ad7ad4634939a7264)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RemoveFavoritesSuccess} and HTTP response
     */
    this.removeFavoritesWithHttpInfo = function(userId, favoriteId, accept) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling removeFavorites");
      }

      // verify the required parameter 'favoriteId' is set
      if (favoriteId === undefined || favoriteId === null) {
        throw new Error("Missing the required parameter 'favoriteId' when calling removeFavorites");
      }

      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling removeFavorites");
      }


      var pathParams = {
        'userId': userId,
        'favoriteId': favoriteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RemoveFavoritesSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/favorites/{favoriteId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a favorite from a user&#39;s favorites list
     * This API can be used to remove a favorite from a user&#39;s favorites list.    This API can only be used by user himself (i.e. userId of logged in user &#x3D; value of userId parameter in URL)       When a favorite is removed from users&#39;s favorites using this API, all user&#39;s XMPP resources will receive the following message indicating that a favorite has been deleted:        &#x60;&#x60;&#x60;html &lt;message type&#x3D;\&quot;management\&quot; id&#x3D;\&quot;8413b42e-563c-4437-9a53-06f638b5ab69_0\&quot;            from&#x3D;\&quot;pcloud@openrainbow.com/172440802160413612281463752830017532\&quot;            to&#x3D;\&quot;85a456023ad249bea7a0cb1d5b4fb34a@openrainbow.com\&quot; xmlns&#x3D;\&quot;jabber:client\&quot;&gt;        &lt;favorite id&#x3D;\&quot;57b44e9c0c32e0b425252f9e\&quot; action&#x3D;\&quot;delete\&quot; type &#x3D; \&quot;user\&quot; peer_id &#x3D;\&quot;574ff5153448af6c2940f908\&quot; xmlns&#x3D;\&quot;jabber:iq:configuration\&quot;/&gt;     &lt;/message&gt; &#x60;&#x60;&#x60;    Example: DELETE https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/favorites/574ff5153448af6c2940f908
     * @param {String} userId User unique identifier (like 56c5c19f94141765119f896c)
     * @param {String} favoriteId Favorite unique identifier (like 5c2e275ad7ad4634939a7264)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RemoveFavoritesSuccess}
     */
    this.removeFavorites = function(userId, favoriteId, accept) {
      return this.removeFavoritesWithHttpInfo(userId, favoriteId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Move favorite to position x in favorite list
     * This API can be used to update a favorite&#39;s position in favorite list.    This API can only be used by user himself (i.e. userId of logged in user &#x3D; value of userId parameter in URL)       When a favorite is update from users&#39;s favorites using this API, all user&#39;s XMPP resources will receive the following message indicating that a user has been added in a group:        &#x60;&#x60;&#x60;html &lt;message type&#x3D;\&quot;management\&quot; id&#x3D;\&quot;8413b42e-563c-4437-9a53-06f638b5ab69_0\&quot;            from&#x3D;\&quot;pcloud@openrainbow.com/172440802160413612281463752830017532\&quot;            to&#x3D;\&quot;85a456023ad249bea7a0cb1d5b4fb34a@openrainbow.com\&quot; xmlns&#x3D;\&quot;jabber:client\&quot;&gt;        &lt;favorite id&#x3D;\&quot;57b44e9c0c32e0b425252f9e\&quot; action&#x3D;\&quot;update\&quot; type &#x3D; \&quot;user\&quot; position &#x3D; \&quot;6\&quot; peer_id &#x3D;\&quot;574ff5153448af6c2940f908\&quot; xmlns&#x3D;\&quot;jabber:iq:configuration\&quot;/&gt;     &lt;/message&gt; &#x60;&#x60;&#x60;    Example: PUT https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/favorites/58d0277a0261b53142a5cab5?position&#x3D;12
     * @param {String} userId User unique identifier (like 56c5c19f94141765119f896c)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateFavoriteSuccess} and HTTP response
     */
    this.updateFavoriteWithHttpInfo = function(userId) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateFavorite");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UpdateFavoriteSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/favorites', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Move favorite to position x in favorite list
     * This API can be used to update a favorite&#39;s position in favorite list.    This API can only be used by user himself (i.e. userId of logged in user &#x3D; value of userId parameter in URL)       When a favorite is update from users&#39;s favorites using this API, all user&#39;s XMPP resources will receive the following message indicating that a user has been added in a group:        &#x60;&#x60;&#x60;html &lt;message type&#x3D;\&quot;management\&quot; id&#x3D;\&quot;8413b42e-563c-4437-9a53-06f638b5ab69_0\&quot;            from&#x3D;\&quot;pcloud@openrainbow.com/172440802160413612281463752830017532\&quot;            to&#x3D;\&quot;85a456023ad249bea7a0cb1d5b4fb34a@openrainbow.com\&quot; xmlns&#x3D;\&quot;jabber:client\&quot;&gt;        &lt;favorite id&#x3D;\&quot;57b44e9c0c32e0b425252f9e\&quot; action&#x3D;\&quot;update\&quot; type &#x3D; \&quot;user\&quot; position &#x3D; \&quot;6\&quot; peer_id &#x3D;\&quot;574ff5153448af6c2940f908\&quot; xmlns&#x3D;\&quot;jabber:iq:configuration\&quot;/&gt;     &lt;/message&gt; &#x60;&#x60;&#x60;    Example: PUT https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/favorites/58d0277a0261b53142a5cab5?position&#x3D;12
     * @param {String} userId User unique identifier (like 56c5c19f94141765119f896c)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateFavoriteSuccess}
     */
    this.updateFavorite = function(userId) {
      return this.updateFavoriteWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
