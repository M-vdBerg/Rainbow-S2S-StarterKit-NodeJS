/**
 * Rainbow Enduser portal
 * # Rainbow end user portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow End user portal. This portal is dedicated to end user features.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * OpenAPI spec version: 1.84.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SendJoinRoomInvitationUsingOpenInviteiId', 'model/SendJoinRoomInvitationUsingOpenInviteiIdSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/SendJoinRoomInvitationUsingOpenInviteiId'), require('../model/SendJoinRoomInvitationUsingOpenInviteiIdSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowEnduserPortal) {
      root.RainbowEnduserPortal = {};
    }
    root.RainbowEnduserPortal.RoomsOpenInviteApi = factory(root.RainbowEnduserPortal.ApiClient, root.RainbowEnduserPortal.SendJoinRoomInvitationUsingOpenInviteiId, root.RainbowEnduserPortal.SendJoinRoomInvitationUsingOpenInviteiIdSuccess);
  }
}(this, function(ApiClient, SendJoinRoomInvitationUsingOpenInviteiId, SendJoinRoomInvitationUsingOpenInviteiIdSuccess) {
  'use strict';

  /**
   * RoomsOpenInvite service.
   * @module api/RoomsOpenInviteApi
   * @version 1.84.0
   */

  /**
   * Constructs a new RoomsOpenInviteApi. 
   * @alias module:api/RoomsOpenInviteApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Join a room using an openInviteId
     * From 1.83.0 release, a Rainbow user may have a public links that will help their coworkers to join rooms. So that he just has to create a room and create a public link so called **&#39;public URL&#39;**. Each user can create on demand a public URL to one of his rooms([users public link][0]). The public URL format is designed by the Rainbow application programmer and must contain at least an &#39;openInviteId&#39;. This openInviteId is an UUID-V4 value.   * https://meet.openrainbow.com/d4bb04c2a2254cd3bebb28e449ce7de3  The goal of this api is to embed on the fly a user in the room bind with the given openInviteId (body parameter). Many error cases may occur:   * The openInviteId is not valid HTTP error 404 Not Found (detail: 40400) * If no room is currently binded or when the room to join is no more active (deleted or archived), an HTTP error 404 Not Found (detail: 404116) is returned. * If the room is locked (autoRegister &#x3D; &#39;lock&#39;), a user not yet registered inside this room is rejected. An HTTP error 403 (detail: 403621 - Forecast a maximum quota reached..) is returned * If the maximum of users for a room is reached, an HTTP error 403 (detail: 403621 - Forecast a maximum quota reached..) is returned     A message stanza is sent to added user. This allow clients to be notified and join the room:        &#x60;&#x60;&#x60;html &lt;message           from&#x3D;&#39;inviter user&#39;s jid&#39;           to&#x3D;&#39;invited user&#39;s jid &#39;&gt;            &lt;x xmlns&#x3D;&#39;jabber:x:conference&#39;                 jid: &#39;room jid&#39;                 reason: &#39;reason given in body parameter&#39; /&gt;    &lt;/message&gt; &#x60;&#x60;&#x60;    A message stanza is sent to moderators as a private room message. This allow clients to display notifications:        &#x60;&#x60;&#x60;html &lt;message           from&#x3D;&#39;room jid&#39;           to&#x3D;&#39;room jid/user&#39;s nic&#39;&gt;            &lt;x body  user&#39;s invited display name has been invited to join the bubble &lt;/body&amp;gt            &lt;x event xmlns&#x3D;&#39;jabber:iq:configuration&#39;                 name: &#39;invitation&#39;                 jid: &#39;invited user&#39;s jid&#39; /&gt;    &lt;/message&gt; &#x60;&#x60;&#x60;  [0]: #api-users_rooms_public_link
     * @param {module:model/SendJoinRoomInvitationUsingOpenInviteiId} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SendJoinRoomInvitationUsingOpenInviteiIdSuccess} and HTTP response
     */
    this.sendJoinRoomInvitationUsingOpenInviteiIdWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendJoinRoomInvitationUsingOpenInviteiId");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SendJoinRoomInvitationUsingOpenInviteiIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/rooms/open-invites', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Join a room using an openInviteId
     * From 1.83.0 release, a Rainbow user may have a public links that will help their coworkers to join rooms. So that he just has to create a room and create a public link so called **&#39;public URL&#39;**. Each user can create on demand a public URL to one of his rooms([users public link][0]). The public URL format is designed by the Rainbow application programmer and must contain at least an &#39;openInviteId&#39;. This openInviteId is an UUID-V4 value.   * https://meet.openrainbow.com/d4bb04c2a2254cd3bebb28e449ce7de3  The goal of this api is to embed on the fly a user in the room bind with the given openInviteId (body parameter). Many error cases may occur:   * The openInviteId is not valid HTTP error 404 Not Found (detail: 40400) * If no room is currently binded or when the room to join is no more active (deleted or archived), an HTTP error 404 Not Found (detail: 404116) is returned. * If the room is locked (autoRegister &#x3D; &#39;lock&#39;), a user not yet registered inside this room is rejected. An HTTP error 403 (detail: 403621 - Forecast a maximum quota reached..) is returned * If the maximum of users for a room is reached, an HTTP error 403 (detail: 403621 - Forecast a maximum quota reached..) is returned     A message stanza is sent to added user. This allow clients to be notified and join the room:        &#x60;&#x60;&#x60;html &lt;message           from&#x3D;&#39;inviter user&#39;s jid&#39;           to&#x3D;&#39;invited user&#39;s jid &#39;&gt;            &lt;x xmlns&#x3D;&#39;jabber:x:conference&#39;                 jid: &#39;room jid&#39;                 reason: &#39;reason given in body parameter&#39; /&gt;    &lt;/message&gt; &#x60;&#x60;&#x60;    A message stanza is sent to moderators as a private room message. This allow clients to display notifications:        &#x60;&#x60;&#x60;html &lt;message           from&#x3D;&#39;room jid&#39;           to&#x3D;&#39;room jid/user&#39;s nic&#39;&gt;            &lt;x body  user&#39;s invited display name has been invited to join the bubble &lt;/body&amp;gt            &lt;x event xmlns&#x3D;&#39;jabber:iq:configuration&#39;                 name: &#39;invitation&#39;                 jid: &#39;invited user&#39;s jid&#39; /&gt;    &lt;/message&gt; &#x60;&#x60;&#x60;  [0]: #api-users_rooms_public_link
     * @param {module:model/SendJoinRoomInvitationUsingOpenInviteiId} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SendJoinRoomInvitationUsingOpenInviteiIdSuccess}
     */
    this.sendJoinRoomInvitationUsingOpenInviteiId = function(body) {
      return this.sendJoinRoomInvitationUsingOpenInviteiIdWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
