/**
 * Rainbow admin portal
 * # Rainbow administrator portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow management portal system. Services are used to manage OT Rainbow system entities  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * OpenAPI spec version: 1.82.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DeleteSystemsSuccess', 'model/GetSystemsIdByPbxIdSuccess', 'model/GetSystemsIdSuccess', 'model/GetSystemsSuccess', 'model/PostSystems', 'model/PostSystemsSuccess', 'model/PutSystems', 'model/PutSystemsSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DeleteSystemsSuccess'), require('../model/GetSystemsIdByPbxIdSuccess'), require('../model/GetSystemsIdSuccess'), require('../model/GetSystemsSuccess'), require('../model/PostSystems'), require('../model/PostSystemsSuccess'), require('../model/PutSystems'), require('../model/PutSystemsSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowAdminPortal) {
      root.RainbowAdminPortal = {};
    }
    root.RainbowAdminPortal.SystemsApi = factory(root.RainbowAdminPortal.ApiClient, root.RainbowAdminPortal.DeleteSystemsSuccess, root.RainbowAdminPortal.GetSystemsIdByPbxIdSuccess, root.RainbowAdminPortal.GetSystemsIdSuccess, root.RainbowAdminPortal.GetSystemsSuccess, root.RainbowAdminPortal.PostSystems, root.RainbowAdminPortal.PostSystemsSuccess, root.RainbowAdminPortal.PutSystems, root.RainbowAdminPortal.PutSystemsSuccess);
  }
}(this, function(ApiClient, DeleteSystemsSuccess, GetSystemsIdByPbxIdSuccess, GetSystemsIdSuccess, GetSystemsSuccess, PostSystems, PostSystemsSuccess, PutSystems, PutSystemsSuccess) {
  'use strict';

  /**
   * Systems service.
   * @module api/SystemsApi
   * @version 1.82.0
   */

  /**
   * Constructs a new SystemsApi. 
   * @alias module:api/SystemsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Delete a system
     * This API allows administrator to delete a given system.       &#x60;superadmin&#x60; can delete systems linked to all sites existing in Rainbow.    &#x60;bp_admin&#x60; can only delete systems linked to sites of End Customer companies for which their bp_admin&#39;s company is the BP company.    &#x60;organization_admin&#x60; can only delete systems linked to sites of companies under their organisation.    &#x60;company_admin&#x60; can only delete systems linked to sites of their company.    &#x60;site_admin&#x60; can only delete the systems linked to the site they administrate.       **Warning**: all phoneNumbers associated to this system will be deleted, and if these phoneNumbers were associated to a Rainbow user, it won&#39;t be anymore.    jid_pbxagent and jid_pbxpcg XMPP accounts will also be deleted from XMPP.       PCG is notified of the system deletion with the following XMPP message. Once PCG has acknowledged the IQ, the system is deleted from mongoDB, jid_pbxagent and jid_pbxpcg XMPP accounts are deleted from XMPP, and all phoneNumbers objects linked to this system are deleted (therefore PCG don&#39;t have to call delete for all deleted system&#39;s phoneNumbers).        &#x60;&#x60;&#x60;html &lt;iq id&#x3D;\&quot;8413b42e-563c-4437-9a53-06f638b5ab69_0\&quot;        from&#x3D;\&quot;pcloud@openrainbow.com/172440802160413612281463752830017532\&quot;        to&#x3D;\&quot;pbxpcg_7ca2d0aefb024c949303b508fcecdad2@openrainbow.com/pbxpcg\&quot;        xmlns&#x3D;\&quot;jabber:client\&quot;&gt;     &lt;config xmlns&#x3D;\&quot;urn:xmpp:pbxagent:config:1\&quot;&gt;         &lt;pbx action&#x3D;\&quot;delete\&quot;&gt;     &lt;/config&gt; &lt;/iq&gt; &#x60;&#x60;&#x60; 
     * @param {String} systemId System unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteSystemsSuccess} and HTTP response
     */
    this.deleteSystemsWithHttpInfo = function(systemId, accept) {
      var postBody = null;

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling deleteSystems");
      }

      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deleteSystems");
      }


      var pathParams = {
        'systemId': systemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeleteSystemsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/systems/{systemId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a system
     * This API allows administrator to delete a given system.       &#x60;superadmin&#x60; can delete systems linked to all sites existing in Rainbow.    &#x60;bp_admin&#x60; can only delete systems linked to sites of End Customer companies for which their bp_admin&#39;s company is the BP company.    &#x60;organization_admin&#x60; can only delete systems linked to sites of companies under their organisation.    &#x60;company_admin&#x60; can only delete systems linked to sites of their company.    &#x60;site_admin&#x60; can only delete the systems linked to the site they administrate.       **Warning**: all phoneNumbers associated to this system will be deleted, and if these phoneNumbers were associated to a Rainbow user, it won&#39;t be anymore.    jid_pbxagent and jid_pbxpcg XMPP accounts will also be deleted from XMPP.       PCG is notified of the system deletion with the following XMPP message. Once PCG has acknowledged the IQ, the system is deleted from mongoDB, jid_pbxagent and jid_pbxpcg XMPP accounts are deleted from XMPP, and all phoneNumbers objects linked to this system are deleted (therefore PCG don&#39;t have to call delete for all deleted system&#39;s phoneNumbers).        &#x60;&#x60;&#x60;html &lt;iq id&#x3D;\&quot;8413b42e-563c-4437-9a53-06f638b5ab69_0\&quot;        from&#x3D;\&quot;pcloud@openrainbow.com/172440802160413612281463752830017532\&quot;        to&#x3D;\&quot;pbxpcg_7ca2d0aefb024c949303b508fcecdad2@openrainbow.com/pbxpcg\&quot;        xmlns&#x3D;\&quot;jabber:client\&quot;&gt;     &lt;config xmlns&#x3D;\&quot;urn:xmpp:pbxagent:config:1\&quot;&gt;         &lt;pbx action&#x3D;\&quot;delete\&quot;&gt;     &lt;/config&gt; &lt;/iq&gt; &#x60;&#x60;&#x60; 
     * @param {String} systemId System unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteSystemsSuccess}
     */
    this.deleteSystems = function(systemId, accept) {
      return this.deleteSystemsWithHttpInfo(systemId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all systems
     * This API allows administrator to retrieve systems they can administrate.       &#x60;superadmin&#x60; and &#x60;support&#x60; get all systems existing in Rainbow.    &#x60;bp_admin&#x60; only get systems linked to sites of End Customer companies for which their bp_admin&#39;s company is the BP company.    &#x60;organization_admin&#x60; only get systems linked to sites of companies under their organisation.    &#x60;company_admin&#x60; only get systems linked to sites of their company.    &#x60;site_admin&#x60; only get the systems linked to the site they administrate.       Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/systems?type&#x3D;oxe&amp;status&#x3D;activated&amp;format&#x3D;small&amp;limit&#x3D;100&amp;offset&#x3D;0&amp;sortField&#x3D;name&amp;sortOrder&#x3D;-1      **Specific feature:** Sharing a system between several companies   * Since 1.47.0 release, configuring companies sharing a **multi-tenant** system is possible.    This corresponds to **OTEC-S OXEs**, which are multi-tenant.    A multi-tenant system, so called **centrex**, allows sharing a call-server between several entities by setting the flag &#x60;isCentrex&#x3D;true&#x60; on the system. This flag is set during the system creation and can&#39;t be changed (the system would have to be deleted first and then re-created without the flag isCentrex).    For Rainbow, an entity is a site with the flag &#x60;isCentrex&#x3D;true&#x60; linked to a company with the flag &#x60;isCentrex&#x3D;true&#x60; (the company and site must both have the flag isCentrex&#x3D;true to be linked to a system with isCentrex&#x3D;true).    A company with the flag isCentrex&#x3D;true can only have a single site (the site will have automatically the flag isCentrex&#x3D;true when it is created).    Getting a list having the status isCentrex&#x3D;true is possible using query parameter filter &#x60;isCentrex&#x60;. * Since 1.73.0 release, configuring companies sharing a **multi-company** system is possible.    A shared multi-company system, so called **shared**, allows sharing a call-server between several sites from different companies.    No specific configuration is applied on the PBX, the specific configuration is only on Rainbow side, by setting the flag &#x60;isShared&#x3D;true&#x60; on the system. This flag is set during the system creation and can&#39;t be changed (the system would have to be deleted first and then re-created without the flag isShared).    It is understood that this approach exposes all users of the PBX to all companies that have users on this PBX (for association, for dial by name). Anyway it seats on a PBX infra where all PBX users can directly dial (by short num and DBN) any other users of the network from their deskphones.    A site being linked to such systems can be linked to other systems (shared or not, but not centrex).    Getting a list having the status isShared&#x3D;true is possible using query parameter filter &#x60;isShared&#x60;. * It is possible to get the list of systems being shared **or** centrex using query parameter filter &#x60;isSharedOrCentrex&#x60;.  
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less system details in response.    - &#x60;small&#x60;: id pbxId version    - &#x60;medium&#x60;: id name pbxId serialNumber version status    - &#x60;full&#x60;: all system fields
     * @param {Number} opts.limit Allow to specify the number of systems to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first system to retrieve (first site if not specified). Warning: if offset &gt; total, no results are returned.
     * @param {String} opts.sortField Sort system list based on the given field.
     * @param {Number} opts.sortOrder Specify order when sorting pbx list.
     * @param {String} opts.name Allows to filter systems list on field name.       The filtering is case insensitive and on partial name match: all systems **containing** the provided name value will be returned (whatever the position of the match).    Ex: if filtering is done on _oxe1_, systems with the following names are match the filter &#39;OXE1&#39;, &#39;Oxe1&#39;, &#39;My oxe1&#39;, &#39;oxe12&#39;, &#39;My OXE12&#39;, ...
     * @param {String} opts.type Allows to filter systems list on the provided type(s)
     * @param {String} opts.status Allows to filter systems list on the provided status(es)
     * @param {String} opts.siteId Allows to filter systems list on the siteIds provided in this option.
     * @param {String} opts.companyId Allows to filter systems list on the siteIds linked to companyIds provided in this option.
     * @param {String} opts.bpId Allows to filter systems list on the bpIds provided in this option.    Only &#x60;superadmin&#x60;, &#x60;support&#x60; and &#x60;bp_admin&#x60; users can use bpId filter.    &#x60;bp_admin&#x60; users can only use bpId filter with bpId they manage (their own BP company or companies being in their BP organisation).
     * @param {Boolean} opts.isShared Allows to filter systems list by the status isShared.
     * @param {Boolean} opts.isCentrex Allows to filter systems list by the status isCentrex.
     * @param {Boolean} opts.isSharedOrCentrex Allows to filter systems list having the requested flag isShared **or** isCentrex.   * If isSharedOrCentrex&#x3D;true, only systems having isShared&#x3D;true or isCentrex&#x3D;true are returned. * If isSharedOrCentrex&#x3D;false, only systems having isShared&#x3D;false and isCentrex&#x3D;false are returned.  
     * @param {Date} opts.fromCreationDate Allows to filter systems list from provided date (ISO 8601 format).
     * @param {Date} opts.toCreationDate Allows to filter systems list until provided date (ISO 8601 format).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSystemsSuccess} and HTTP response
     */
    this.getSystemsWithHttpInfo = function(accept, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getSystems");
      }


      var pathParams = {
      };
      var queryParams = {
        'format': opts['format'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'name': opts['name'],
        'type': opts['type'],
        'status': opts['status'],
        'siteId': opts['siteId'],
        'companyId': opts['companyId'],
        'bpId': opts['bpId'],
        'isShared': opts['isShared'],
        'isCentrex': opts['isCentrex'],
        'isSharedOrCentrex': opts['isSharedOrCentrex'],
        'fromCreationDate': opts['fromCreationDate'],
        'toCreationDate': opts['toCreationDate'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetSystemsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/systems', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all systems
     * This API allows administrator to retrieve systems they can administrate.       &#x60;superadmin&#x60; and &#x60;support&#x60; get all systems existing in Rainbow.    &#x60;bp_admin&#x60; only get systems linked to sites of End Customer companies for which their bp_admin&#39;s company is the BP company.    &#x60;organization_admin&#x60; only get systems linked to sites of companies under their organisation.    &#x60;company_admin&#x60; only get systems linked to sites of their company.    &#x60;site_admin&#x60; only get the systems linked to the site they administrate.       Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/systems?type&#x3D;oxe&amp;status&#x3D;activated&amp;format&#x3D;small&amp;limit&#x3D;100&amp;offset&#x3D;0&amp;sortField&#x3D;name&amp;sortOrder&#x3D;-1      **Specific feature:** Sharing a system between several companies   * Since 1.47.0 release, configuring companies sharing a **multi-tenant** system is possible.    This corresponds to **OTEC-S OXEs**, which are multi-tenant.    A multi-tenant system, so called **centrex**, allows sharing a call-server between several entities by setting the flag &#x60;isCentrex&#x3D;true&#x60; on the system. This flag is set during the system creation and can&#39;t be changed (the system would have to be deleted first and then re-created without the flag isCentrex).    For Rainbow, an entity is a site with the flag &#x60;isCentrex&#x3D;true&#x60; linked to a company with the flag &#x60;isCentrex&#x3D;true&#x60; (the company and site must both have the flag isCentrex&#x3D;true to be linked to a system with isCentrex&#x3D;true).    A company with the flag isCentrex&#x3D;true can only have a single site (the site will have automatically the flag isCentrex&#x3D;true when it is created).    Getting a list having the status isCentrex&#x3D;true is possible using query parameter filter &#x60;isCentrex&#x60;. * Since 1.73.0 release, configuring companies sharing a **multi-company** system is possible.    A shared multi-company system, so called **shared**, allows sharing a call-server between several sites from different companies.    No specific configuration is applied on the PBX, the specific configuration is only on Rainbow side, by setting the flag &#x60;isShared&#x3D;true&#x60; on the system. This flag is set during the system creation and can&#39;t be changed (the system would have to be deleted first and then re-created without the flag isShared).    It is understood that this approach exposes all users of the PBX to all companies that have users on this PBX (for association, for dial by name). Anyway it seats on a PBX infra where all PBX users can directly dial (by short num and DBN) any other users of the network from their deskphones.    A site being linked to such systems can be linked to other systems (shared or not, but not centrex).    Getting a list having the status isShared&#x3D;true is possible using query parameter filter &#x60;isShared&#x60;. * It is possible to get the list of systems being shared **or** centrex using query parameter filter &#x60;isSharedOrCentrex&#x60;.  
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less system details in response.    - &#x60;small&#x60;: id pbxId version    - &#x60;medium&#x60;: id name pbxId serialNumber version status    - &#x60;full&#x60;: all system fields
     * @param {Number} opts.limit Allow to specify the number of systems to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first system to retrieve (first site if not specified). Warning: if offset &gt; total, no results are returned.
     * @param {String} opts.sortField Sort system list based on the given field.
     * @param {Number} opts.sortOrder Specify order when sorting pbx list.
     * @param {String} opts.name Allows to filter systems list on field name.       The filtering is case insensitive and on partial name match: all systems **containing** the provided name value will be returned (whatever the position of the match).    Ex: if filtering is done on _oxe1_, systems with the following names are match the filter &#39;OXE1&#39;, &#39;Oxe1&#39;, &#39;My oxe1&#39;, &#39;oxe12&#39;, &#39;My OXE12&#39;, ...
     * @param {String} opts.type Allows to filter systems list on the provided type(s)
     * @param {String} opts.status Allows to filter systems list on the provided status(es)
     * @param {String} opts.siteId Allows to filter systems list on the siteIds provided in this option.
     * @param {String} opts.companyId Allows to filter systems list on the siteIds linked to companyIds provided in this option.
     * @param {String} opts.bpId Allows to filter systems list on the bpIds provided in this option.    Only &#x60;superadmin&#x60;, &#x60;support&#x60; and &#x60;bp_admin&#x60; users can use bpId filter.    &#x60;bp_admin&#x60; users can only use bpId filter with bpId they manage (their own BP company or companies being in their BP organisation).
     * @param {Boolean} opts.isShared Allows to filter systems list by the status isShared.
     * @param {Boolean} opts.isCentrex Allows to filter systems list by the status isCentrex.
     * @param {Boolean} opts.isSharedOrCentrex Allows to filter systems list having the requested flag isShared **or** isCentrex.   * If isSharedOrCentrex&#x3D;true, only systems having isShared&#x3D;true or isCentrex&#x3D;true are returned. * If isSharedOrCentrex&#x3D;false, only systems having isShared&#x3D;false and isCentrex&#x3D;false are returned.  
     * @param {Date} opts.fromCreationDate Allows to filter systems list from provided date (ISO 8601 format).
     * @param {Date} opts.toCreationDate Allows to filter systems list until provided date (ISO 8601 format).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSystemsSuccess}
     */
    this.getSystems = function(accept, opts) {
      return this.getSystemsWithHttpInfo(accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a system data
     * This API allows administrator to retrieve a given system.       &#x60;superadmin&#x60; and &#x60;support&#x60; can get all systems existing in Rainbow.    &#x60;bp_admin&#x60; can only get systems linked to sites of End Customer companies for which their bp_admin&#39;s company is the BP company.    &#x60;organization_admin&#x60; can only get systems linked to sites of companies under their organisation.    &#x60;company_admin&#x60; can only get systems linked to sites of their company.    &#x60;site_admin&#x60; can only get the systems linked to the site they administrate.       Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/systems/569d0ef3ef7816921f7e94fa
     * @param {String} systemId System unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSystemsIdSuccess} and HTTP response
     */
    this.getSystemsIdWithHttpInfo = function(systemId, accept) {
      var postBody = null;

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling getSystemsId");
      }

      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getSystemsId");
      }


      var pathParams = {
        'systemId': systemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetSystemsIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/systems/{systemId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a system data
     * This API allows administrator to retrieve a given system.       &#x60;superadmin&#x60; and &#x60;support&#x60; can get all systems existing in Rainbow.    &#x60;bp_admin&#x60; can only get systems linked to sites of End Customer companies for which their bp_admin&#39;s company is the BP company.    &#x60;organization_admin&#x60; can only get systems linked to sites of companies under their organisation.    &#x60;company_admin&#x60; can only get systems linked to sites of their company.    &#x60;site_admin&#x60; can only get the systems linked to the site they administrate.       Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/systems/569d0ef3ef7816921f7e94fa
     * @param {String} systemId System unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSystemsIdSuccess}
     */
    this.getSystemsId = function(systemId, accept) {
      return this.getSystemsIdWithHttpInfo(systemId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a system data by pbxId
     * This API allows administrator to retrieve a given system from its pbxId.       &#x60;superadmin&#x60; and &#x60;support&#x60; can get all systems existing in Rainbow.    &#x60;bp_admin&#x60; can only get systems linked to sites of End Customer companies for which their bp_admin&#39;s company is the BP company.    &#x60;organization_admin&#x60; can only get systems linked to sites of companies under their organisation.    &#x60;company_admin&#x60; can only get systems linked to sites of their company.    &#x60;site_admin&#x60; can only get the systems linked to the site they administrate.
     * @param {String} pbxId Pbx unique identifier known by PCG
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSystemsIdByPbxIdSuccess} and HTTP response
     */
    this.getSystemsIdByPbxIdWithHttpInfo = function(pbxId, accept) {
      var postBody = null;

      // verify the required parameter 'pbxId' is set
      if (pbxId === undefined || pbxId === null) {
        throw new Error("Missing the required parameter 'pbxId' when calling getSystemsIdByPbxId");
      }

      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getSystemsIdByPbxId");
      }


      var pathParams = {
        'pbxId': pbxId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetSystemsIdByPbxIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/systems/pbxid/{pbxId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a system data by pbxId
     * This API allows administrator to retrieve a given system from its pbxId.       &#x60;superadmin&#x60; and &#x60;support&#x60; can get all systems existing in Rainbow.    &#x60;bp_admin&#x60; can only get systems linked to sites of End Customer companies for which their bp_admin&#39;s company is the BP company.    &#x60;organization_admin&#x60; can only get systems linked to sites of companies under their organisation.    &#x60;company_admin&#x60; can only get systems linked to sites of their company.    &#x60;site_admin&#x60; can only get the systems linked to the site they administrate.
     * @param {String} pbxId Pbx unique identifier known by PCG
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSystemsIdByPbxIdSuccess}
     */
    this.getSystemsIdByPbxId = function(pbxId, accept) {
      return this.getSystemsIdByPbxIdWithHttpInfo(pbxId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a system
     * This API allows administrator to create a system.    A system hosts the CCA (Call Control Agent) configuration.       &#x60;superadmin&#x60; can create systems linked to all sites existing in Rainbow.    &#x60;bp_admin&#x60; can only create systems linked to sites of End Customer companies for which their bp_admin&#39;s company is the BP company.    &#x60;organization_admin&#x60; can only create systems linked to sites of companies under their organisation.    &#x60;company_admin&#x60; can only create systems linked to sites of their company.    &#x60;site_admin&#x60; can only create the systems linked to the site they administrate.       **Specific feature:** Sharing a system between several companies   * Since 1.47.0 release, configuring companies sharing a **multi-tenant** system is possible.    This corresponds to **OTEC-S OXEs**, which are multi-tenant.    A multi-tenant system, so called **centrex**, allows sharing a call-server between several entities by setting the flag &#x60;isCentrex&#x3D;true&#x60; on the system. This flag is set during the system creation and can&#39;t be changed (the system would have to be deleted first and then re-created without the flag isCentrex).    For Rainbow, an entity is a site with the flag &#x60;isCentrex&#x3D;true&#x60; linked to a company with the flag &#x60;isCentrex&#x3D;true&#x60; (the company and site must both have the flag isCentrex&#x3D;true to be linked to a system with isCentrex&#x3D;true).    A company with the flag isCentrex&#x3D;true can only have a single site (the site will have automatically the flag isCentrex&#x3D;true when it is created).    Getting a list having the status isCentrex&#x3D;true is possible using query parameter filter &#x60;isCentrex&#x60;. * Since 1.73.0 release, configuring companies sharing a **multi-company** system is possible.    A shared multi-company system, so called **shared**, allows sharing a call-server between several sites from different companies.    No specific configuration is applied on the PBX, the specific configuration is only on Rainbow side, by setting the flag &#x60;isShared&#x3D;true&#x60; on the system. This flag is set during the system creation and can&#39;t be changed (the system would have to be deleted first and then re-created without the flag isShared).    It is understood that this approach exposes all users of the PBX to all companies that have users on this PBX (for association, for dial by name). Anyway it seats on a PBX infra where all PBX users can directly dial (by short num and DBN) any other users of the network from their deskphones.    A site being linked to such systems can be linked to other systems (shared or not, but not centrex).    Getting a list having the status isShared&#x3D;true is possible using query parameter filter &#x60;isShared&#x60;. * It is possible to get the list of systems being shared **or** centrex using query parameter filter &#x60;isSharedOrCentrex&#x60;.  
     * @param {module:model/PostSystems} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PostSystemsSuccess} and HTTP response
     */
    this.postSystemsWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSystems");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PostSystemsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/systems', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a system
     * This API allows administrator to create a system.    A system hosts the CCA (Call Control Agent) configuration.       &#x60;superadmin&#x60; can create systems linked to all sites existing in Rainbow.    &#x60;bp_admin&#x60; can only create systems linked to sites of End Customer companies for which their bp_admin&#39;s company is the BP company.    &#x60;organization_admin&#x60; can only create systems linked to sites of companies under their organisation.    &#x60;company_admin&#x60; can only create systems linked to sites of their company.    &#x60;site_admin&#x60; can only create the systems linked to the site they administrate.       **Specific feature:** Sharing a system between several companies   * Since 1.47.0 release, configuring companies sharing a **multi-tenant** system is possible.    This corresponds to **OTEC-S OXEs**, which are multi-tenant.    A multi-tenant system, so called **centrex**, allows sharing a call-server between several entities by setting the flag &#x60;isCentrex&#x3D;true&#x60; on the system. This flag is set during the system creation and can&#39;t be changed (the system would have to be deleted first and then re-created without the flag isCentrex).    For Rainbow, an entity is a site with the flag &#x60;isCentrex&#x3D;true&#x60; linked to a company with the flag &#x60;isCentrex&#x3D;true&#x60; (the company and site must both have the flag isCentrex&#x3D;true to be linked to a system with isCentrex&#x3D;true).    A company with the flag isCentrex&#x3D;true can only have a single site (the site will have automatically the flag isCentrex&#x3D;true when it is created).    Getting a list having the status isCentrex&#x3D;true is possible using query parameter filter &#x60;isCentrex&#x60;. * Since 1.73.0 release, configuring companies sharing a **multi-company** system is possible.    A shared multi-company system, so called **shared**, allows sharing a call-server between several sites from different companies.    No specific configuration is applied on the PBX, the specific configuration is only on Rainbow side, by setting the flag &#x60;isShared&#x3D;true&#x60; on the system. This flag is set during the system creation and can&#39;t be changed (the system would have to be deleted first and then re-created without the flag isShared).    It is understood that this approach exposes all users of the PBX to all companies that have users on this PBX (for association, for dial by name). Anyway it seats on a PBX infra where all PBX users can directly dial (by short num and DBN) any other users of the network from their deskphones.    A site being linked to such systems can be linked to other systems (shared or not, but not centrex).    Getting a list having the status isShared&#x3D;true is possible using query parameter filter &#x60;isShared&#x60;. * It is possible to get the list of systems being shared **or** centrex using query parameter filter &#x60;isSharedOrCentrex&#x60;.  
     * @param {module:model/PostSystems} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PostSystemsSuccess}
     */
    this.postSystems = function(body) {
      return this.postSystemsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a system
     * This API allows administrator to update a given system.       &#x60;superadmin&#x60; can update systems linked to all sites existing in Rainbow.    &#x60;bp_admin&#x60; can only update systems linked to sites of End Customer companies for which their bp_admin&#39;s company is the BP company.    &#x60;organization_admin&#x60; can only update systems linked to sites of companies under their organisation.    &#x60;company_admin&#x60; can only update systems linked to sites of their company.    &#x60;site_admin&#x60; can only update the systems linked to the site they administrate.       When the system is updated, PCG is notified on its corresponding JID pbxpcg with the following XMPP message:        &#x60;&#x60;&#x60;html &lt;message id&#x3D;\&quot;8413b42e-563c-4437-9a53-06f638b5ab69_0\&quot;           from&#x3D;\&quot;pcloud@openrainbow.com/172440802160413612281463752830017532\&quot;           to&#x3D;\&quot;pbxpcg_7ca2d0aefb024c949303b508fcecdad2@openrainbow.com\&quot;           xmlns&#x3D;\&quot;jabber:client\&quot;&gt;      &lt;config xmlns&#x3D;\&quot;urn:xmpp:pbxagent:config:1\&quot;/&gt;          &lt;pbx action&#x3D;\&quot;update\&quot;&gt;      &lt;/config&gt; &lt;/message&gt; &#x60;&#x60;&#x60;    Don&#39;t use this api to move a &#39;isCentrex&#39; system to another site. Use instead DELETE /api/rainbow/admin/v1.0/sites/:siteId/systems then POST /api/rainbow/admin/v1.0/sites/:siteId/systems
     * @param {String} systemId System unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {module:model/PutSystems} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PutSystemsSuccess} and HTTP response
     */
    this.putSystemsWithHttpInfo = function(systemId, body) {
      var postBody = body;

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling putSystems");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSystems");
      }


      var pathParams = {
        'systemId': systemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PutSystemsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/systems/{systemId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a system
     * This API allows administrator to update a given system.       &#x60;superadmin&#x60; can update systems linked to all sites existing in Rainbow.    &#x60;bp_admin&#x60; can only update systems linked to sites of End Customer companies for which their bp_admin&#39;s company is the BP company.    &#x60;organization_admin&#x60; can only update systems linked to sites of companies under their organisation.    &#x60;company_admin&#x60; can only update systems linked to sites of their company.    &#x60;site_admin&#x60; can only update the systems linked to the site they administrate.       When the system is updated, PCG is notified on its corresponding JID pbxpcg with the following XMPP message:        &#x60;&#x60;&#x60;html &lt;message id&#x3D;\&quot;8413b42e-563c-4437-9a53-06f638b5ab69_0\&quot;           from&#x3D;\&quot;pcloud@openrainbow.com/172440802160413612281463752830017532\&quot;           to&#x3D;\&quot;pbxpcg_7ca2d0aefb024c949303b508fcecdad2@openrainbow.com\&quot;           xmlns&#x3D;\&quot;jabber:client\&quot;&gt;      &lt;config xmlns&#x3D;\&quot;urn:xmpp:pbxagent:config:1\&quot;/&gt;          &lt;pbx action&#x3D;\&quot;update\&quot;&gt;      &lt;/config&gt; &lt;/message&gt; &#x60;&#x60;&#x60;    Don&#39;t use this api to move a &#39;isCentrex&#39; system to another site. Use instead DELETE /api/rainbow/admin/v1.0/sites/:siteId/systems then POST /api/rainbow/admin/v1.0/sites/:siteId/systems
     * @param {String} systemId System unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {module:model/PutSystems} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PutSystemsSuccess}
     */
    this.putSystems = function(systemId, body) {
      return this.putSystemsWithHttpInfo(systemId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
