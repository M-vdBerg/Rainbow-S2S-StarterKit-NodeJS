/**
 * Rainbow authentication portal
 * # Rainbow authentication portal API guide  ## Preamble  [Download Postman collection][0]  ### Introduction  This guide describes list of API services that are provided by OT Rainbow authentication portal system. Services are used to manage OT Rainbow authentication.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages.   HTTP request GET is used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them.   JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.    [0]: AuthenticationPortalServer_postman.json  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.95.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GetLoginUrlSuccessData'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./GetLoginUrlSuccessData'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowAuthenticationPortal) {
      root.RainbowAuthenticationPortal = {};
    }
    root.RainbowAuthenticationPortal.GetLoginUrlSuccess = factory(root.RainbowAuthenticationPortal.ApiClient, root.RainbowAuthenticationPortal.GetLoginUrlSuccessData);
  }
}(this, function(ApiClient, GetLoginUrlSuccessData) {
  'use strict';



  /**
   * The GetLoginUrlSuccess model module.
   * @module model/GetLoginUrlSuccess
   * @version 1.95.0
   */

  /**
   * Constructs a new <code>GetLoginUrlSuccess</code>.
   * @alias module:model/GetLoginUrlSuccess
   * @class
   * @param data {Array.<module:model/GetLoginUrlSuccessData>} List of authentication type with the associated login URL.
   * @param authorizationEndpoint {String} OIDC provider's authorization endpoint
   * @param clientId {String} client_id used for Rainbow application in OIDC provider
   * @param issuer {String} OIDC provider's Issuer Identifier
   * @param onlyUseImplicitFlow {Boolean} Indicates if configuration allows to use only OIDC implicit flow. <br/> If onlyUseImplicitFlow is set to true, `loginUrl` is not returned. <br/><br/> Implicit flow can be used instead of authorization code grant implemented by Rainbow APIs, but in that case implicit flow has to be implemented by the client. The id_token retrieved by the client using implicit flow can then be used to get a Rainbow token using API GET /api/rainbow/authentication/v1.0/oidc-client/jwt.
   */
  var exports = function(data, authorizationEndpoint, clientId, issuer, onlyUseImplicitFlow) {
    var _this = this;

    _this['data'] = data;
    _this['authorizationEndpoint'] = authorizationEndpoint;
    _this['clientId'] = clientId;
    _this['issuer'] = issuer;
    _this['onlyUseImplicitFlow'] = onlyUseImplicitFlow;
  };

  /**
   * Constructs a <code>GetLoginUrlSuccess</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/GetLoginUrlSuccess} obj Optional instance to populate.
   * @return {module:model/GetLoginUrlSuccess} The populated <code>GetLoginUrlSuccess</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('data')) {
        obj['data'] = ApiClient.convertToType(data['data'], [GetLoginUrlSuccessData]);
      }
      if (data.hasOwnProperty('authorizationEndpoint')) {
        obj['authorizationEndpoint'] = ApiClient.convertToType(data['authorizationEndpoint'], 'String');
      }
      if (data.hasOwnProperty('clientId')) {
        obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
      }
      if (data.hasOwnProperty('discoveryUrl')) {
        obj['discoveryUrl'] = ApiClient.convertToType(data['discoveryUrl'], 'String');
      }
      if (data.hasOwnProperty('issuer')) {
        obj['issuer'] = ApiClient.convertToType(data['issuer'], 'String');
      }
      if (data.hasOwnProperty('jwksUri')) {
        obj['jwksUri'] = ApiClient.convertToType(data['jwksUri'], 'String');
      }
      if (data.hasOwnProperty('onlyUseImplicitFlow')) {
        obj['onlyUseImplicitFlow'] = ApiClient.convertToType(data['onlyUseImplicitFlow'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * List of authentication type with the associated login URL.
   * @member {Array.<module:model/GetLoginUrlSuccessData>} data
   */
  exports.prototype['data'] = undefined;
  /**
   * OIDC provider's authorization endpoint
   * @member {String} authorizationEndpoint
   */
  exports.prototype['authorizationEndpoint'] = undefined;
  /**
   * client_id used for Rainbow application in OIDC provider
   * @member {String} clientId
   */
  exports.prototype['clientId'] = undefined;
  /**
   * OIDC provider's discoveryUrl
   * @member {String} discoveryUrl
   */
  exports.prototype['discoveryUrl'] = undefined;
  /**
   * OIDC provider's Issuer Identifier
   * @member {String} issuer
   */
  exports.prototype['issuer'] = undefined;
  /**
   * OIDC provider's jwks_uri <br/> This setting is used to retrieve the OIDC provider's signing key(s) in order to validate the id_token's signature.
   * @member {String} jwksUri
   */
  exports.prototype['jwksUri'] = undefined;
  /**
   * Indicates if configuration allows to use only OIDC implicit flow. <br/> If onlyUseImplicitFlow is set to true, `loginUrl` is not returned. <br/><br/> Implicit flow can be used instead of authorization code grant implemented by Rainbow APIs, but in that case implicit flow has to be implemented by the client. The id_token retrieved by the client using implicit flow can then be used to get a Rainbow token using API GET /api/rainbow/authentication/v1.0/oidc-client/jwt.
   * @member {Boolean} onlyUseImplicitFlow
   */
  exports.prototype['onlyUseImplicitFlow'] = undefined;



  return exports;
}));


