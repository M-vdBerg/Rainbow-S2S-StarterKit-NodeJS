/**
 * Rainbow authent portal
 * # Rainbow authentication portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow authentication portal system. Services are used to manage OT Rainbow authentication.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages.   HTTP request GET is used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them.   JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * OpenAPI spec version: 1.78.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GetApiRainbowAuthenticationV10ValidatorSuccess', 'model/GetBasicLoginSuccess', 'model/GetLogoutSuccess', 'model/GetRenewSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GetApiRainbowAuthenticationV10ValidatorSuccess'), require('../model/GetBasicLoginSuccess'), require('../model/GetLogoutSuccess'), require('../model/GetRenewSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowAuthentPortal) {
      root.RainbowAuthentPortal = {};
    }
    root.RainbowAuthentPortal.AuthenticationApi = factory(root.RainbowAuthentPortal.ApiClient, root.RainbowAuthentPortal.GetApiRainbowAuthenticationV10ValidatorSuccess, root.RainbowAuthentPortal.GetBasicLoginSuccess, root.RainbowAuthentPortal.GetLogoutSuccess, root.RainbowAuthentPortal.GetRenewSuccess);
  }
}(this, function(ApiClient, GetApiRainbowAuthenticationV10ValidatorSuccess, GetBasicLoginSuccess, GetLogoutSuccess, GetRenewSuccess) {
  'use strict';

  /**
   * Authentication service.
   * @module api/AuthenticationApi
   * @version 1.78.2
   */

  /**
   * Constructs a new AuthenticationApi. 
   * @alias module:api/AuthenticationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Validate user JWT
     * This API allows to get a validation status on a token.
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetApiRainbowAuthenticationV10ValidatorSuccess} and HTTP response
     */
    this.getApiRainbowAuthenticationV10ValidatorWithHttpInfo = function(accept) {
      var postBody = null;

      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getApiRainbowAuthenticationV10Validator");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetApiRainbowAuthenticationV10ValidatorSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/authentication/v1.0/validator', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Validate user JWT
     * This API allows to get a validation status on a token.
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetApiRainbowAuthenticationV10ValidatorSuccess}
     */
    this.getApiRainbowAuthenticationV10Validator = function(accept) {
      return this.getApiRainbowAuthenticationV10ValidatorWithHttpInfo(accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Login user
     * This API allows Rainbow users to login.       Application is also authenticated during the user login.       If login is successful, the API returns a **JSON Web Token** (JWT) which has to be provided by clients for all Rainbow APIs requiring user authentication:   * The JWT is valid only for a given time period. * The JWT can be renewed a few times using API [GET /api/rainbow/authentication/v1.0/renew][0]. * The maximum number of renew is given in the JWT payload, as well as the current number of time the token has been renewed (see below). * Once the JWT expired, or if the maximum of token renew has been reached, user must login again using this API.  The JWT returned contains the following data in payload:        &#x60;&#x60;&#x60;json {       \&quot;countRenewed\&quot;: 0,  // Number of times the token has been renewed       \&quot;maxTokenRenew\&quot;: 5,  // Number of times the token can be renewed       \&quot;user\&quot;: {           \&quot;id\&quot;: \&quot;572756967bfbca0d0e09a6b4\&quot;,  // Logged in user id           \&quot;loginEmail\&quot;: \&quot;user@company.com\&quot;  // Logged in user loginEmail       },       \&quot;app\&quot;: {           \&quot;id\&quot;: \&quot;598983029db9b5b14693a6f0\&quot;,  // Application id used for the authentication           \&quot;name\&quot;: \&quot;My App\&quot;  // Application name       },       \&quot;iat\&quot;: 1463588327,  // (Issued At) Time at which the JWT was issued       \&quot;exp\&quot;: 2183588327  // (Expiration Time) Expiration time after which the JWT won&#39;t be accepted } &#x60;&#x60;&#x60;       If login / password combination is wrong, an error 401 is return.    If appId / appSecret combination is wrong, an error 401 is return.    The following login protection is implemented:   * After a given number of login failure (5 by default), the user account is **locked** for a given time period (60 min by default). * As long as the maximum number of login failure has not been reached, a 401 error with errorDetailsCode &#x60;401500&#x60; is returned. * Once the maximum number of login attempts has been reached, a 401 error with errorDetailsCode &#x60;401501&#x60; is returned: the user account is locked for the given time period. * While the user account is locked, the same response with errorDetailsCode &#x60;401501&#x60; will be returned for each new login attempt for this user account (even if a good login / password combination is provided). If the login / password combination is wrong, the locked time period restarts from this new wrong attempt. * Once the locked time period is over, a login with the good credentials will be allowed. * While the account is locked, the user can reset his password. In that case, his account will be unlocked and he will be able to login with his new password. * While the account is locked, a superadmin / support / admin (organisation or company level) user can set a new password for this account. In that case, this account will be unlocked and the user will be able to login with this new password.  - Warning login url is case sensitive (lowercase). For example, /Login or /LOGIN won&#39;t work.login will be forbidden for a certain delay if too much consecutive wrong password errors occurs, after this user has to request a password change or just wait (see implementation details above).   [0]: #api-authentication-GetRenew
     * @param {String} authorization Basic &lt;base64encode(userLogin:userPassword)&gt;
     * @param {String} xRainbowAppAuth Basic &lt;base64encode(appId:sha256(appSecretuserPassword))&gt; (concatenation of appSecret and userPassword, hashed with sha256)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.xRainbowClient the app used
     * @param {String} opts.xRainbowClientVersion 1.10.7
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetBasicLoginSuccess} and HTTP response
     */
    this.getBasicLoginWithHttpInfo = function(authorization, xRainbowAppAuth, accept, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getBasicLogin");
      }

      // verify the required parameter 'xRainbowAppAuth' is set
      if (xRainbowAppAuth === undefined || xRainbowAppAuth === null) {
        throw new Error("Missing the required parameter 'xRainbowAppAuth' when calling getBasicLogin");
      }

      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getBasicLogin");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': authorization,
        'x-rainbow-app-auth': xRainbowAppAuth,
        'x-rainbow-client': opts['xRainbowClient'],
        'x-rainbow-client-version': opts['xRainbowClientVersion'],
        'accept': accept
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetBasicLoginSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/authentication/v1.0/login', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Login user
     * This API allows Rainbow users to login.       Application is also authenticated during the user login.       If login is successful, the API returns a **JSON Web Token** (JWT) which has to be provided by clients for all Rainbow APIs requiring user authentication:   * The JWT is valid only for a given time period. * The JWT can be renewed a few times using API [GET /api/rainbow/authentication/v1.0/renew][0]. * The maximum number of renew is given in the JWT payload, as well as the current number of time the token has been renewed (see below). * Once the JWT expired, or if the maximum of token renew has been reached, user must login again using this API.  The JWT returned contains the following data in payload:        &#x60;&#x60;&#x60;json {       \&quot;countRenewed\&quot;: 0,  // Number of times the token has been renewed       \&quot;maxTokenRenew\&quot;: 5,  // Number of times the token can be renewed       \&quot;user\&quot;: {           \&quot;id\&quot;: \&quot;572756967bfbca0d0e09a6b4\&quot;,  // Logged in user id           \&quot;loginEmail\&quot;: \&quot;user@company.com\&quot;  // Logged in user loginEmail       },       \&quot;app\&quot;: {           \&quot;id\&quot;: \&quot;598983029db9b5b14693a6f0\&quot;,  // Application id used for the authentication           \&quot;name\&quot;: \&quot;My App\&quot;  // Application name       },       \&quot;iat\&quot;: 1463588327,  // (Issued At) Time at which the JWT was issued       \&quot;exp\&quot;: 2183588327  // (Expiration Time) Expiration time after which the JWT won&#39;t be accepted } &#x60;&#x60;&#x60;       If login / password combination is wrong, an error 401 is return.    If appId / appSecret combination is wrong, an error 401 is return.    The following login protection is implemented:   * After a given number of login failure (5 by default), the user account is **locked** for a given time period (60 min by default). * As long as the maximum number of login failure has not been reached, a 401 error with errorDetailsCode &#x60;401500&#x60; is returned. * Once the maximum number of login attempts has been reached, a 401 error with errorDetailsCode &#x60;401501&#x60; is returned: the user account is locked for the given time period. * While the user account is locked, the same response with errorDetailsCode &#x60;401501&#x60; will be returned for each new login attempt for this user account (even if a good login / password combination is provided). If the login / password combination is wrong, the locked time period restarts from this new wrong attempt. * Once the locked time period is over, a login with the good credentials will be allowed. * While the account is locked, the user can reset his password. In that case, his account will be unlocked and he will be able to login with his new password. * While the account is locked, a superadmin / support / admin (organisation or company level) user can set a new password for this account. In that case, this account will be unlocked and the user will be able to login with this new password.  - Warning login url is case sensitive (lowercase). For example, /Login or /LOGIN won&#39;t work.login will be forbidden for a certain delay if too much consecutive wrong password errors occurs, after this user has to request a password change or just wait (see implementation details above).   [0]: #api-authentication-GetRenew
     * @param {String} authorization Basic &lt;base64encode(userLogin:userPassword)&gt;
     * @param {String} xRainbowAppAuth Basic &lt;base64encode(appId:sha256(appSecretuserPassword))&gt; (concatenation of appSecret and userPassword, hashed with sha256)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.xRainbowClient the app used
     * @param {String} opts.xRainbowClientVersion 1.10.7
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetBasicLoginSuccess}
     */
    this.getBasicLogin = function(authorization, xRainbowAppAuth, accept, opts) {
      return this.getBasicLoginWithHttpInfo(authorization, xRainbowAppAuth, accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Logout user
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetLogoutSuccess} and HTTP response
     */
    this.getLogoutWithHttpInfo = function(accept) {
      var postBody = null;

      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getLogout");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetLogoutSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/authentication/v1.0/logout', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Logout user
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetLogoutSuccess}
     */
    this.getLogout = function(accept) {
      return this.getLogoutWithHttpInfo(accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Renew user JWT
     * This API allows Rainbow users to renew their JSON Web Token (JWT), thus extending the expiration date of their current JWT.       This API requires user to be authenticated with a valid non expired JWT.    If so, a new JWT is returned, with the expiration date starting from now.       **Warning:** The JWT can only be renewed a given number of times, after this user has to login again to get a new token using API [GET /api/rainbow/authentication/v1.0/login][0].    The maximum number of renew is given in the JWT, as well as the current number of time the token has been renewed.  [0]: #api-authentication-GetLogin
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetRenewSuccess} and HTTP response
     */
    this.getRenewWithHttpInfo = function(accept) {
      var postBody = null;

      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getRenew");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetRenewSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/authentication/v1.0/renew', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Renew user JWT
     * This API allows Rainbow users to renew their JSON Web Token (JWT), thus extending the expiration date of their current JWT.       This API requires user to be authenticated with a valid non expired JWT.    If so, a new JWT is returned, with the expiration date starting from now.       **Warning:** The JWT can only be renewed a given number of times, after this user has to login again to get a new token using API [GET /api/rainbow/authentication/v1.0/login][0].    The maximum number of renew is given in the JWT, as well as the current number of time the token has been renewed.  [0]: #api-authentication-GetLogin
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetRenewSuccess}
     */
    this.getRenew = function(accept) {
      return this.getRenewWithHttpInfo(accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
